{
  "name": "FUTURISTE AGENTE RAG 2",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -80,
        224
      ],
      "id": "b31281ad-309c-4ff5-8c20-1047dbc77daa",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "content": "# ATUALIZA BASE DE PRODUTOS",
        "height": 510,
        "width": 3047,
        "color": 4
      },
      "id": "e433d726-85c6-4784-9e60-f9b066f3cabc",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -208,
        80
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "a96d5f72-e000-4e27-9f0c-04b8aa91691c",
      "name": "Processar Produtos Individualmente",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1488,
        224
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
                  "typeValidation": "strict"
          },
          "conditions": [
            {
                    "id": "1",
                    "leftValue": "={{ $json.acao }}",
                    "rightValue": "create",
              "operator": {
                "type": "string",
                      "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
              "renameOutput": true,
              "outputKey": "create"
            },
            {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
                  "typeValidation": "strict"
          },
          "conditions": [
            {
                    "id": "2",
                    "leftValue": "={{ $json.acao }}",
                    "rightValue": "update",
              "operator": {
                      "type": "string",
                      "operation": "equals"
              }
            }
          ],
          "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "update"
            }
          ]
        },
        "options": {}
      },
      "id": "824b483c-476d-4a3a-913f-d14fb5d1759e",
      "name": "Switch - Create vs Update",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        1744,
        240
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": 267479,
        "tableId": 657363,
        "rowId": "={{ $json.id_baserow }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 5391437,
              "fieldValue": "={{ $json.id_produto_loja_integrada }}"
            },
            {
              "fieldId": 5391438,
              "fieldValue": "={{ $json.nome }}"
            },
            {
              "fieldId": 5391439,
              "fieldValue": "={{ $json.titulo_produto }}"
            },
            {
              "fieldId": 5391440,
              "fieldValue": "={{ $json.apelido }}"
            },
            {
              "fieldId": 5391441,
              "fieldValue": "={{ $json.sku }}"
            },
            {
              "fieldId": 5391442,
              "fieldValue": "={{ $json.descricao_produto }}"
            },
            {
              "fieldId": 5391443,
              "fieldValue": "={{ $json.descricao_produto }}"
            },
            {
              "fieldId": 5391444,
              "fieldValue": "={{ $json.url_produto }}"
            },
            {
              "fieldId": 5391445,
              "fieldValue": "={{ $json.url_video_youtube }}"
            },
            {
              "fieldId": 5391450,
              "fieldValue": "={{ $json.ativo }}"
            },
            {
              "fieldId": 5391451,
              "fieldValue": "={{ $json.bloqueado }}"
            },
            {
              "fieldId": 5391452,
              "fieldValue": "={{ $json.removido }}"
            },
            {
              "fieldId": 5391453,
              "fieldValue": "={{ $json.tipo }}"
            },
            {
              "fieldId": 5391454,
              "fieldValue": "={{ $json.preco_cheio }}"
            },
            {
              "fieldId": 5391455,
              "fieldValue": "={{ $json.preco_promocional }}"
            },
            {
              "fieldId": 5391456,
              "fieldValue": "={{ $json.preco_custo }}"
            },
            {
              "fieldId": 5391457,
              "fieldValue": "={{ $json.sob_consulta }}"
            },
            {
              "fieldId": 5391458,
              "fieldValue": "={{ $json.data_sincronizacao }}"
            },
            {
              "fieldId": 5391459,
              "fieldValue": "={{ $json.fonte }}"
            }
          ]
        }
      },
      "id": "9684c7cb-74c2-413e-9872-29e5ce4138e3",
      "name": "Baserow - UPDATE",
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        2048,
        384
      ],
      "alwaysOutputData": true,
      "credentials": {
        "baserowApi": {
          "id": "6Q6zmxem0cig5L8h",
          "name": "Baserow account"
        }
      }
    },
    {
      "parameters": {
        "operation": "create",
        "databaseId": 267479,
        "tableId": 657363,
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 5391437,
              "fieldValue": "={{ $json.id_produto_loja_integrada }}"
            },
            {
              "fieldId": 5391438,
              "fieldValue": "={{ $json.nome }}"
            },
            {
              "fieldId": 5391439,
              "fieldValue": "={{ $json.titulo_produto }}"
            },
            {
              "fieldId": 5391440,
              "fieldValue": "={{ $json.apelido }}"
            },
            {
              "fieldId": 5391442,
              "fieldValue": "={{ $json.descricao_produto }}"
            },
            {
              "fieldId": 5391443,
              "fieldValue": "={{ $json.descricao_produto }}"
            },
            {
              "fieldId": 5391444,
              "fieldValue": "={{ $json.url_produto }}"
            },
            {
              "fieldId": 5391445,
              "fieldValue": "={{ $json.url_video_youtube }}"
            },
            {
              "fieldId": 5391450,
              "fieldValue": "={{ $json.ativo }}"
            },
            {
              "fieldId": 5391451,
              "fieldValue": "={{ $json.bloqueado }}"
            },
            {
              "fieldId": 5391452,
              "fieldValue": "={{ $json.removido }}"
            },
            {
              "fieldId": 5391453,
              "fieldValue": "={{ $json.tipo }}"
            },
            {
              "fieldId": 5391454,
              "fieldValue": "={{ $json.preco_cheio }}"
            },
            {
              "fieldId": 5391455,
              "fieldValue": "={{ $json.preco_promocional }}"
            },
            {
              "fieldId": 5391456,
              "fieldValue": "={{ $json.preco_custo }}"
            },
            {
              "fieldId": 5391457,
              "fieldValue": "={{ $json.sob_consulta }}"
            },
            {
              "fieldId": 5391458,
              "fieldValue": "={{ $json.data_sincronizacao }}"
            },
            {
              "fieldId": 5391459,
              "fieldValue": "={{ $json.fonte }}"
            }
          ]
        }
      },
      "id": "797e7431-b01d-48ce-8578-c1175b1922c8",
      "name": "Baserow - CREATE",
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        2048,
        192
      ],
      "alwaysOutputData": true,
      "credentials": {
        "baserowApi": {
          "id": "6Q6zmxem0cig5L8h",
          "name": "Baserow account"
        }
      }
    },
    {
      "parameters": {
        "operation": "list",
        "databaseId": 267479,
        "tableId": 657363,
        "options": {}
      },
      "id": "baserow2-read-existing",
      "name": "Baserow2",
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        896,
        400
      ],
      "alwaysOutputData": true,
      "credentials": {
        "baserowApi": {
          "id": "6Q6zmxem0cig5L8h",
          "name": "Baserow account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Combinar dados de produtos e preços com SINCRONIZAÇÃO\n// Lógica: usar preços como referência e sincronizar com Baserow\nconsole.log('🔍 DEBUG - Iniciando sincronização com Baserow');\n\nlet produtos = [];\nlet precos = [];\nlet produtosComPreco = [];\nlet produtosExistentes = [];\n\ntry {\n  // PRIMEIRO: Acessar dados da API de Preços (nosso ponto de referência)\n  const dadosPrecos = $('Loja Integrada API - Preços').first().json.objects;\n  if (dadosPrecos && dadosPrecos.length > 0) {\n    console.log('💰 Preços encontrados:', dadosPrecos.length, 'itens');\n    precos = dadosPrecos;\n\n    // Extrair IDs dos produtos que têm preço\n    const idsProdutosComPreco = precos\n      .filter(preco => preco.cheio && parseFloat(preco.cheio) > 0)\n      .map(preco => {\n        const produtoUrl = preco.produto || '';\n        const produtoId = produtoUrl.split('/').pop();\n        return produtoId;\n      })\n      .filter(id => id); // Remove IDs vazios\n\n    console.log('🎯 Produtos com preço válido encontrados:', idsProdutosComPreco.length);\n    console.log('📋 IDs dos produtos com preço:', idsProdutosComPreco);\n\n    // SEGUNDO: Acessar dados da API de Produtos e filtrar apenas os que têm preço\n    const dadosProdutos = $('Loja Integrada API - Produtos').first().json.objects;\n    if (dadosProdutos && dadosProdutos.length > 0) {\n      console.log('📦 Produtos totais da API:', dadosProdutos.length, 'itens');\n\n      // Filtrar apenas produtos que têm preço\n      produtosComPreco = dadosProdutos.filter(produto => {\n        const produtoTemPreco = idsProdutosComPreco.includes(produto.id?.toString());\n        if (!produtoTemPreco) {\n          console.log(`⚠️ Produto ${produto.nome} (ID: ${produto.id}) não tem preço - IGNORADO`);\n        }\n        return produtoTemPreco;\n      });\n\n      console.log('✅ Produtos filtrados com preço:', produtosComPreco.length);\n      produtos = produtosComPreco;\n    } else {\n      console.log('⚠️ Nenhum produto encontrado na API de produtos');\n    }\n  } else {\n    console.log('⚠️ Nenhum preço encontrado - não há produtos para processar');\n  }\n\n  // TERCEIRO: Verificar produtos existentes no Baserow para sincronização\n  try {\n    const baserowProdutos = $('Baserow2').first().json;\n    if (baserowProdutos && Array.isArray(baserowProdutos)) {\n      produtosExistentes = baserowProdutos;\n      console.log('📊 Produtos existentes no Baserow:', produtosExistentes.length);\n    } else {\n      console.log('📊 Nenhum produto encontrado no Baserow');\n    }\n  } catch (error) {\n    console.log('⚠️ Erro ao acessar produtos do Baserow:', error.message);\n    console.log('📊 Considerando que não há produtos existentes');\n  }\n\n} catch (error) {\n  console.log('❌ Erro ao acessar dados das APIs:', error.message);\n}\n\nconsole.log('✅ Produtos encontrados:', produtos.length);\nconsole.log('✅ Preços encontrados:', precos.length);\nconsole.log('📋 Lista de produtos:', produtos);\nconsole.log('💵 Lista de preços:', precos);\nconsole.log('🗄️ Produtos existentes no Baserow:', produtosExistentes.length);\n\n// Função para limpar HTML\nfunction limparHtml(html) {\n  if (!html || typeof html !== 'string') {\n    return '';\n  }\n  \n  // Remove todas as tags HTML\n  let textoLimpo = html.replace(/<[^>]*>/g, '');\n  \n  // Remove entidades HTML\n  textoLimpo = textoLimpo.replace(/&[^;]+;/g, ' ');\n  \n  // Remove espaços extras e quebras de linha\n  textoLimpo = textoLimpo.replace(/\\s+/g, ' ').trim();\n  \n  return textoLimpo;\n}\n\n// Função para formatar preço\nfunction formatarPreco(valor) {\n  if (!valor) return 'R$ 0,00';\n\n  const numero = parseFloat(valor);\n  if (isNaN(numero)) return 'R$ 0,00';\n\n  // Formatar como moeda brasileira\n  return new Intl.NumberFormat('pt-BR', {\n    style: 'currency',\n    currency: 'BRL'\n  }).format(numero);\n}\n\n// Função para encontrar preço do produto\nfunction encontrarPreco(produtoId, listaPrecos) {\n  console.log('🔍 Procurando preço para produto ID:', produtoId);\n  console.log('📋 Lista de preços disponível:', listaPrecos?.length || 0);\n\n  if (!produtoId || !listaPrecos || listaPrecos.length === 0) {\n    console.log('❌ Parâmetros inválidos ou lista vazia');\n    return null;\n  }\n\n  const produtoIdStr = produtoId.toString();\n  console.log('🔄 Procurando por ID string:', produtoIdStr);\n\n  const precoEncontrado = listaPrecos.find(preco => {\n    // Verificar se o preço tem referência ao produto\n    const precoProdutoUrl = preco.produto || '';\n    console.log('Preço atual - URL produto:', precoProdutoUrl);\n\n    const precoProdutoId = precoProdutoUrl.split('/').pop();\n    console.log('Preço atual - ID extraído:', precoProdutoId);\n\n    const match = precoProdutoId === produtoIdStr;\n    console.log('Comparação:', precoProdutoId, '===', produtoIdStr, '=', match);\n\n    return match;\n  });\n\n  console.log('Resultado da busca:', precoEncontrado ? 'Encontrado' : 'Não encontrado');\n  return precoEncontrado;\n}\n\n// SINCRONIZAÇÃO: Comparar produtos da API com Baserow\nconsole.log('🔄 Iniciando sincronização...');\n\n// Criar mapa de produtos existentes no Baserow por ID\nconst mapaProdutosBaserow = new Map();\nprodutosExistentes.forEach(produto => {\n  if (produto.id_produto_loja_integrada) {\n    mapaProdutosBaserow.set(produto.id_produto_loja_integrada.toString(), produto);\n  }\n});\n\nconsole.log('🗂️ Mapa de produtos Baserow criado com', mapaProdutosBaserow.size, 'itens');\n\n// Preparar produtos para sincronização\nconst produtosParaSincronizar = [];\nlet produtosParaCreate = 0;\nlet produtosParaUpdate = 0;\n\n// Processar cada produto da API\nprodutos.forEach((produto, index) => {\n  console.log(`📦 Processando produto ${index + 1}/${produtos.length}:`, produto.nome, 'ID:', produto.id);\n\n  // Encontrar preço correspondente\n  const precoCorrespondente = encontrarPreco(produto.id, precos);\n  console.log(`💰 Preço encontrado para ${produto.nome}:`, precoCorrespondente ? 'SIM' : 'NÃO');\n\n  // Preparar dados do produto\n  const produtoFinal = {\n    // Dados do produto\n    id_produto_loja_integrada: produto.id,\n    nome: produto.nome,\n    titulo_produto: produto.nome,\n    apelido: produto.apelido,\n    sku: produto.sku,\n    descricao_completa: produto.descricao_completa,\n    descricao_produto: limparHtml(produto.descricao_completa), // HTML limpo\n    url_produto: produto.url || '',\n    url_video_youtube: produto.url_video_youtube || '',\n    gtin: produto.gtin || '',\n    mpn: produto.mpn || '',\n    ncm: produto.ncm || '',\n    id_externo: produto.id_externo || '',\n    ativo: produto.ativo,\n    bloqueado: produto.bloqueado,\n    removido: produto.removido,\n    tipo: produto.tipo || 'produto',\n\n    // Dados de preço (se encontrado)\n    preco_cheio: precoCorrespondente ? formatarPreco(precoCorrespondente.cheio) : 'R$ 0,00',\n    preco_promocional: precoCorrespondente && precoCorrespondente.promocional ? formatarPreco(precoCorrespondente.promocional) : null,\n    preco_custo: precoCorrespondente && precoCorrespondente.custo ? formatarPreco(precoCorrespondente.custo) : null,\n    sob_consulta: precoCorrespondente ? precoCorrespondente.sob_consulta : false,\n\n    // Metadados\n    data_sincronizacao: new Date().toISOString(),\n    fonte: 'loja_integrada'\n  };\n\n  // Verificar se produto já existe no Baserow\n  const produtoExistente = mapaProdutosBaserow.get(produto.id?.toString());\n\n  if (produtoExistente) {\n    // Produto existe - precisa de UPDATE\n    produtoFinal.acao = 'update';\n    produtoFinal.id_baserow = produtoExistente.id; // ID do registro no Baserow\n    produtosParaUpdate++;\n    console.log(`🔄 Produto ${produto.nome} - UPDATE (ID Baserow: ${produtoExistente.id})`);\n  } else {\n    // Produto não existe - precisa de CREATE\n    produtoFinal.acao = 'create';\n    produtosParaCreate++;\n    console.log(`➕ Produto ${produto.nome} - CREATE`);\n  }\n\n  produtosParaSincronizar.push(produtoFinal);\n});\n\nconsole.log('🎯 Sincronização preparada:');\nconsole.log('- Produtos para CREATE:', produtosParaCreate);\nconsole.log('- Produtos para UPDATE:', produtosParaUpdate);\nconsole.log('- Total para sincronizar:', produtosParaSincronizar.length);\n\nconsole.log('📊 Resumo geral:');\nconsole.log('- Produtos da API com preço:', produtos.length);\nconsole.log('- Preços encontrados:', precos.length);\nconsole.log('- Produtos existentes no Baserow:', produtosExistentes.length);\nconsole.log('- Produtos para CREATE:', produtosParaCreate);\nconsole.log('- Produtos para UPDATE:', produtosParaUpdate);\n\nconsole.log('📋 Primeiro produto para sincronizar:', produtosParaSincronizar[0]);\n\nreturn produtosParaSincronizar;"
      },
      "id": "6e6f360f-def1-411a-8fa4-6088bc1fe2ba",
      "name": "Combinar Produtos e Preços",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1168,
        208
      ]
    },
    {
      "parameters": {
        "mode": "waitForAll"
      },
      "id": "242f9aac-3d08-4421-add0-081b9fd9254a",
      "name": "Aguardar APIs",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        896,
        224
      ],
      "webhookId": "875ad9ee-9385-4d17-8ed6-17927b216ced"
    },
    {
      "parameters": {
        "url": "https://api.awsli.com.br/v1/produto_preco",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "limit",
              "value": "100"
            },
            {
              "name": "offset",
              "value": "0"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "chave_api 7b9d04db65e45dcbf8c3 aplicacao fc665b96-2434-4c05-92d1-91a595612d61"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "4b1e64f2-5cdb-4b02-90fb-f3b3effbb47d",
      "name": "Loja Integrada API - Preços",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        448,
        224
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "uKA8k5WPzNvodqZg",
          "name": "Teste Jussi"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.awsli.com.br/v1/produto",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "limit",
              "value": "100"
            },
            {
              "name": "offset",
              "value": "0"
            },
            {
              "name": "description_html",
              "value": "1"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "chave_api 7b9d04db65e45dcbf8c3 aplicacao fc665b96-2434-4c05-92d1-91a595612d61"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "aad83fc3-d836-465f-b208-56936dd934ef",
      "name": "Loja Integrada API - Produtos",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        176,
        224
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "uKA8k5WPzNvodqZg",
          "name": "Teste Jussi"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Loja Integrada API - Produtos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Processar Produtos Individualmente": {
      "main": [
        [],
        [
          {
            "node": "Switch - Create vs Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch - Create vs Update": {
      "main": [
        [
          {
            "node": "Baserow - CREATE",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Baserow - UPDATE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combinar Produtos e Preços": {
      "main": [
        [
          {
            "node": "Processar Produtos Individualmente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aguardar APIs": {
      "main": [
        [
          {
            "node": "Combinar Produtos e Preços",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loja Integrada API - Preços": {
      "main": [
        [
          {
            "node": "Aguardar APIs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loja Integrada API - Produtos": {
      "main": [
        [
          {
            "node": "Loja Integrada API - Preços",
            "type": "main",
            "index": 0
          },
          {
            "node": "Baserow2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow2": {
      "main": [
        [
          {
            "node": "Aguardar APIs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "076c9e3e-e1c8-45d8-9987-8967b7fa12a7",
  "meta": {
    "instanceId": "4faefdf3059315485669fe72f46d2b3d3b854f78d714ee73fce79128bb5ebe6d"
  },
  "id": "tgEETRC5iYpy7dv8",
  "tags": []
}